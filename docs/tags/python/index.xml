<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Bogota Computer Science Study Group notes</title>
    <link>https://bogota-computer-science-study-group.github.io/bogota-computer-science-study-group/tags/python/</link>
    <description>Recent content in Python on Bogota Computer Science Study Group notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) Made with &lt;3 in Bogota.</copyright>
    <lastBuildDate>Sat, 01 Jun 2024 16:58:21 -0500</lastBuildDate>
    <atom:link href="https://bogota-computer-science-study-group.github.io/bogota-computer-science-study-group/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Efficient Queue Implementation Using Stacks in Python</title>
      <link>https://bogota-computer-science-study-group.github.io/bogota-computer-science-study-group/posts/make-a-queue-using-two-stacks/</link>
      <pubDate>Sat, 01 Jun 2024 16:58:21 -0500</pubDate>
      <guid>https://bogota-computer-science-study-group.github.io/bogota-computer-science-study-group/posts/make-a-queue-using-two-stacks/</guid>
      <description>This post explains how to efficiently implement a queue using two stacks in Python. The queue supports basic operations like enqueue (push), dequeue (pop), and peek. We&amp;rsquo;ll explore the algorithm behind this implementation and provide a complete Python code listing.&#xA;Introduction A queue is a linear data structure that follows the First-In-First-Out (FIFO) principle. In contrast, a stack follows the Last-In-First-Out (LIFO) principle. To implement a queue using stacks efficiently, we need to use two stacks to simulate the FIFO behavior of a queue while achieving O(1) time complexity for most operations.</description>
    </item>
    <item>
      <title>Solve the Hanoi Towers Problem with Python Recursion</title>
      <link>https://bogota-computer-science-study-group.github.io/bogota-computer-science-study-group/posts/hanoi-towers/</link>
      <pubDate>Sun, 17 Mar 2024 14:29:24 -0500</pubDate>
      <guid>https://bogota-computer-science-study-group.github.io/bogota-computer-science-study-group/posts/hanoi-towers/</guid>
      <description>Hanoi Towers The code starts with a helper function getAlt(src, dest) that returns the index of the peg that is not the source or destination peg:&#xA;def getAlt(src, dest): if (src == 0 and dest == 1) or (src == 1 and dest == 0): return 2 elif (src == 0 and dest == 2) or (src == 2 and dest == 0): return 1 elif (src == 1 and dest == 2) or (src == 2 and dest == 1): return 0 The main recursive function move(pieces, target_disk, source) handles the actual movement of the disks.</description>
    </item>
    <item>
      <title>November 2023 Programming Resources</title>
      <link>https://bogota-computer-science-study-group.github.io/bogota-computer-science-study-group/posts/november-2023/</link>
      <pubDate>Sun, 17 Mar 2024 13:29:24 -0500</pubDate>
      <guid>https://bogota-computer-science-study-group.github.io/bogota-computer-science-study-group/posts/november-2023/</guid>
      <description>November 2023 https://www.linkedin.com/posts/reza-maraghechi-b46ba564_python-handwrite-activity-7134648536863817728-ZYhn?utm_source=share&amp;amp;utm_medium=member_desktop&#xA;https://www.htmhell.dev/adventcalendar/2023/2/&#xA;https://github.com/karpathy/minGPT&#xA;https://html-lang.org/html.js&#xA;https://tontinton.com/posts/database-fundementals/&#xA;https://youtu.be/WGorCjLCdqM&#xA;https://thenewstack.io/donald-knuths-2023-christmas-lecture-make-the-cells-dance/&#xA;https://www.swi-prolog.org/download/publications/tabling-book.pdf</description>
    </item>
  </channel>
</rss>
